클래스의 구성요소 : 필드(멤버변수), 메소드, 생성자
객체사용
1. 객체생성 new 클래스명 ();
2. 객체의 필드에 데이터 담기
3. 객체의 메소드를 호출

생성자 선언 - 필드를 초기화
1. 클래스 안에 선언
2. 생성자명은 클래스명과 동일 (생성자명 = 클래스명)
3. 리턴타입이 없는 메소드의 형태를 띈다

생성자 선언문이 없으면 default 생성자가 만들어진다.
생성자 선언문이 하나라도 있다면 default 생성자는 만들어 지지 않는다. 

생성자에서 다른 생성자를 호출시 this 키워드를 붙인다
생성자 호출문 부터 선언한다.

this : 클래스 자기자신을 뜻한다
		생성자/메소드의 파라미터 변수명과 필드명과 같다면
		필드를 구분하기 위해 필드앞에 클래스의 변수다라고 해서 this라는 키워드를 붙인다
		또는 생성자에서 다른 생성자를 호출시에 this라는 키워드를 붙인다.

------------------------------------------------
객체지향(객체중심) - Object Oriented Programming
현실세계에서는 실물로 판단한다고 하면
모든 사물은 객체라고 할 수 있다.
ex) 자동차 모니터 빔 핸드폰 마우스 등등등
객체중심으로 프로그래밍 한다.

1. 자동차는 객체
: 차종, 년식, 주행거리 등과 같은 특성(=데이터)을 갖고있음.

자동차로는 어떤 일을 할 수 있을까?
전진하는 행위, 후진하는 행위, 와이퍼를 움직이는 행위
클락션을 울린다 등등의 행위를 할 수 있다

자동차가 갖고있는 특성을 '데이터' 라고 한다
데이터 => 변수를 갖는다.

무언가를 출력할 기능
기능적인 것은 - 메소드

2. 은행계좌는 객체
 예금주, 계좌번호, 잔액 - 데이터(변수선언)

은행계좌를 갖고는 어떤 행위를 할 수 있을까?
입출금 - 기능 (메소드)

내가 주체적으로 실행한다.

입금하는 행위를 했을때(기능) 은행통장에 잔고가 늘어남
기능(메소드)에 의해서 데이터에 변화가 발생한다.

필드

클래스가 갖고 있는 변수를 필드라고 한다.

★★★★ 클래스 : 필드(멤버변수), 메소드, 생성자 ★★★★

객체를 만들기(클래스를 선언한다)
class 클래스명 {
     필드, 메소드, 생성자(클래스를 만드는 구성요소)
}

class 자동차 {
  연식(필드), 전진한다(메소드), xx(생성자)
}

class 은행계좌 {
  예금주, 계좌번호(필드), 입출금(메소드), xxx(생성자)
}

class(객체를 생성하는 성형틀)는 붕어빵 틀
이걸 통해서 붕어빵을 만들어낸다
붕어빵을 갖고있는 데이터가
팥,슈크림,피자, 반죽
데이터에 따라서 결과물도 !각각의 특성을 띈다!


만들어내는 과정
클래스를 틀로해서 생성한 객체는 메모리에 올라간다.(실물로 안보임)
>올려지는 이러한 과정을 인스턴스화<
-> 인스턴스(=인스턴스생성 , 객체생성)가 만들어 진다.
: 필드 - 멤버변수, 인스턴스변수(=인스턴스화된변수)
구성요소들 간에는 레벨이 없다.
없다는 얘기는 즉, 동등하다(동등수준이다)

>>>>>>필드는 초기화를 하지 않아도 된다. - 숫자 : 0, boolean : false, String : null;

객체생성문 : new 클래스명();
주소를 알고있다.

