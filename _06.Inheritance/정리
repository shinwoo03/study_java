상속
부모-자식 관계 : parent class - child class
super-sub 관계 : super class - sub class
상위클래스 하위클래스
class 자식클래스명  extends 부모클래스명 {}


본체{} 없는 메소드 : 추상메소드(abstract) -->(하는일은 결국) 메소드 오버라이딩 강제
추상메소드가 선언되어 있는 클래스는 추상클래스(abstract) --> 상속 강제
추상클래스를 상속받은 서브클래스는 선언되어 있는 추상메소드를 오버라이딩 해야만 한다. -> 그래야 구체화 가능

접근제어 형태
private(같은 클래스) < default(같은패키지) < protected < public(패키지가 달라도 사용가능)

protected : 상속받으면 패키지가 달라도 접근 가능

메소드 오버라이딩하는 경우
접근제어는 super 메소드의 접근제어와 같거나 더 넓은 범위의 접근제어만 지정 가능하다.

다향성 : 다양한 형태로 표현할 수 있다.
상속관계가 있을 때 서브클래스를 수퍼클래스의 데이터타입으로 표현할 수 있따.
super데이터타입 변수 = (super데이터 타입) (sub)객체변수; UpCasting
sub데이터타입 변수 = (sub데이터타입) (super)객체변수; DownCasting

<05.31>

인터페이스
기준이 되는 규칙이 있고 그 규칙을 정해둔게 인터페이스.
인터페이스가 있다면 기준에 맞춰 만들어진 서로 다른 객체간의 결합이(연결이) 잘 이루어 질 수 있다.
예) 도형과 관련된 프로젝트
A : 정삼각형 클래스
B : 점사각형 클래스
C : 원 클래스
D : 각 도형객체 생성해서 사용하는 실행프로그램
각각 도형의 기능 : 넓이를 구한다, 둘레를 구한다 등등 -> 추상메소드로 선언
추상메소드로만 이루어진 클래스 : 인터페이스


인터페이스 특징
1. public 인 추상메소드만 선언 가능
   public static final 필드 선언가능 
   public 은 생략가능.
2. 인터페이스는 객체생성 못한다.
	(생성자가 호출이 안된다)
3. 추상메소드들은 반드시 오버라이딩 해야한다는 강제성을 갖는다.
   (상속을 통해서 누군가의 서브를 통해서 메모리에 올릴수있다.)
   일반적으로 기능들(메소드) 모아서 선언한다.
   메소드 오버라이딩 : 접근제어는 super의 접근제어와 같거나 더 넓은 범위만 사용가능
   인터페이스의 메소드를 오버라이딩할때는 접근제어는 반드시 public이어야 한다.

4. 클래스의 상송 extends
   인터페이스의 구현(상속) implements
   class 클래스명 implements 인터페이스명 {
   }

5. 클래스는 다중상속 불가
   인터페이스는 다중 구현(상속) 가능
   class 클래스명 implements 인터페이스명1, 인터페이스명2,.... {
   }

6. 상속과 구현 동시에 하는 경우 - 상속부터
   class 클래스명 extends super클래스 implements 인터페이스명 {
   }

7. 인터페이스가 인터페이스를 다중상속 할 수 있다.

interface A{
}
interface B{
}
interface C extends A, B{
}

class A{
}
class B extends A{
}
class C extends B


데이터베이스와 연동하여 처리하는 경우
DB의 정보를 클래스 담아 사용 - DTO (Data Transfer Object)
DB와 관련된 처리(기능)에 사용 - DAO (Data Access Object)
DAO - CRUD(Create, Read, Update, Delete)
Create - insert
Read - 목록 select, 한건(선택) select
Update - update
Delete - delete




