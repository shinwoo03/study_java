클래스의 구성요소 : 필드, 메소드, 생성자
class ClassName{
필드
메소드 : public static void main(String[] a) {
 } (여태 우리가 해왔던거)
생성자
}


메소드 : 클래스의 기능을 담당한다.
		클래스가 갖는 데이터를 어떻게 처리할 것인가...기능적인 처리
		(메소드 안에는 변수선언, 조건문, 반복문)
		
		마트에 갔더니 물건을 파는 상인, 물건을 사는 손님 
		객체 : 상인 상인이 갖고있는 데이터에는 팔 물건과 거슬러줄 돈을 갖고있다
		상인이 하는 행위(기능적인 행위) : 물건을 판다(물건이 줄어든다) 돈이라는 데이터가 변한다.(이러한 행위를 메소드라고 한다) 
		-> 상인이 갖는 데이터에는 변화가 발생 
		상인이 갖는 데이터 : 물건, 돈 - 클래스변수, 필드
public : 접근 제한자(접근 제어자) - public(클래스를 벗어나서도 사용가능), protected, default, private(클래스 내에서만 사용)
static : 공유의 개념이다.
void : 리턴타입 
	   메소드 {} 내부에 있는 처리를 한 후에 결과값을 리턴할게 있는지 없는지에 따라서 
	   리턴할 데이터가 있다면 리턴타입을 지정하고, 
	   리턴할 데이터가 없을때는 void로 지정한다. -> 리턴할 데이터가 없다.	
메소드명(매개변수) : main(String[] a) - main 메소드 실행시 받게 되는 데이터를 담는 변수
	받을 데이터가 없다면 매개변수는 선언하지 않는다
	받을 데이터가 있다면 매개변수를 선언해야 한다.

메소드는 클래스에 선언한다. (메소드 안에 메소드를 선언할 수 없다.)
메소드 안에는 변수선언, 조건문, 반복문	

메소드 오버로딩 : 똑같은 이름의 메소드를 파라미터의 갯수를 다르게 하거나 
              파라미터의 갯수가 같더라도 데이터타입을 다르게 하여 선언하는 것

   5-17일
메소드 선언
void 메소드명(){
}
메소드 선언
void 메소드명(파라미터 변수){
}

메소드 호출
메소드명();
메소드명( 데이터 );